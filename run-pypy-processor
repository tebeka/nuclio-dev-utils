#!/usr/bin/env python
"""Run the pypy processor"""
# Assume we're running from nuclio root

import atexit
from argparse import ArgumentParser, FileType
from os import environ, remove, symlink
from os.path import abspath, basename, dirname, exists, splitext
from subprocess import call, check_output

here = dirname(abspath(__file__))

default_file = f'{here}/python-handler/handler.py'
default_handler = 'handler'

parser = ArgumentParser(description=__doc__)
parser.add_argument(
    '-f', '--file', help='handler file', type=FileType(), default=default_file)
parser.add_argument(
    '-H', '--handler', help='handler name', default=default_handler)
parser.add_argument(
    '-w', '--max-workers', help='number of workers', default=1, type=int)
args = parser.parse_args()

py_path = dirname(args.file.name)
module_name, _ = splitext(basename(args.file.name))
handler_name = args.handler
max_workers = args.max_workers

cfg = f'''
meta:
  name: pypy handler
spec:
  runtime: pypy
  handler: {module_name}:{handler_name}
  triggers:
    incrementor_http:
      maxWorkers: {max_workers}
      kind: http
'''

cfg_file = '/tmp/python3-handler.yaml'
with open(cfg_file, 'w') as out:
    out.write(cfg)

out = check_output(['pkg-config', '--cflags', 'pypy'])
# "-I/opt/pypy2-v5.10.0-linux64/include" -> # "/opt/pypy2-v5.10.0-linux64"
pypy_home = out.decode('utf-8').split()[0]
pypy_home = dirname(pypy_home)[2:]

# Create link to nuclio_interface in py_path
iface_path = abspath('./pkg/processor/runtime/pypy/nuclio_interface.py')
dest_iface = f'{py_path}/{basename(iface_path)}'
if exists(dest_iface):
    remove(dest_iface)
symlink(iface_path, dest_iface)


def cleanup():
    for file in [dest_iface, dest_iface + 'c']:
        if exists(file):
            remove(file)


atexit.register(cleanup)

env = environ.copy()
env['NUCLIO_PYTHON_PATH'] = py_path
env['NUCLIO_PYPY_HOME'] = pypy_home
env['LD_LIBRARY_PATH'] = f'{pypy_home}/bin'
env['GODEBUG'] = 'cgocheck=0'


retval = call(['./processor', '-config', cfg_file], env=env)
raise SystemExit(retval)
