#!/usr/bin/env python
"""Run the python processor"""

import atexit
from argparse import ArgumentParser
from os import environ, remove
from os.path import abspath, basename, dirname, exists, splitext
from shutil import rmtree
from subprocess import call

here = dirname(abspath(__file__))


parser = ArgumentParser(description=__doc__)
args = parser.parse_args()

py_file = './test/_functions/python/timeout/timeout.py'
handler_name = 'handler'
py_path = dirname(py_file)
module_name, _ = splitext(basename(py_file))

cfg = f'''
metadata:
  name: python handler
spec:
  runtime: python
  handler: {module_name}:{handler_name}
  eventTimeout: 20ms
  triggers:
    incrementor_http:
      maxWorkers: 1
      kind: http
'''

cfg_file = '/tmp/timeout-handler.yaml'
with open(cfg_file, 'w') as out:
    out.write(cfg)

# Assume we're running from nuclio root
wrapper_script = abspath(
    './pkg/processor/runtime/python/py/_nuclio_wrapper.py')

env = environ.copy()
env['NUCLIO_PYTHON_PATH'] = py_path
env['NUCLIO_PYTHON_WRAPPER_PATH'] = wrapper_script


def cleanup():
    pyc = py_file + 'c'
    if exists(pyc):
        remove(pyc)

    pycache = f'{py_path}/__pycache__'
    if exists(pycache):
        rmtree(pycache)


cleanup()  # Clean slate
atexit.register(cleanup)

retval = call(['./processor', '-config', cfg_file], env=env)
raise SystemExit(retval)
