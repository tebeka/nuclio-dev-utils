#!/usr/bin/env python
"""Convert test output of tests to human readable format"""

import json
import re
from argparse import ArgumentParser, FileType
from functools import partial
from textwrap import indent as indent_text


def print_json(obj, output, indent):
    for key, value in sorted(obj.items()):
        if not isinstance(value, str):
            print(f'{indent}{key}: {value}')
            continue

        try:
            value = json.loads(value)
            if isinstance(value, dict):
                print_json(value, output, indent+'\t')
                continue
        except ValueError:
            pass

        if isinstance(value, str) and '\n' in value:
            print(f'{indent}{key}:', file=args.output)
            print(indent_text(value, indent))
            continue

        print(f'{indent}{key}: {value}')


parser = ArgumentParser(description=__doc__)
parser.add_argument(
    'input', help='input file', nargs='?', default='-', type=FileType('r'))
parser.add_argument(
    'output', help='input file', nargs='?', default='-', type=FileType('w'))
args = parser.parse_args()

output = partial(print, end='', file=args.output)

for lnum, line in enumerate(args.input, 1):
    # 18.05.27 06:05:40.194
    if not re.match('\d\d\.\d\d.\d\d \d\d:\d\d:\d\d', line):
        output(line)
        continue
    i = line.find('{')
    if i == -1:
        output(line)
        continue

    try:
        obj = json.loads(line[i:])
    except ValueError:
        output(line)
        continue

    output(line[:i] + '\n')
    print_json(obj, args.output, '\t')
