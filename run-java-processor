#!/usr/bin/env python
# Run the java processor

from argparse import ArgumentParser, FileType
from os import environ
from os.path import abspath, dirname
from subprocess import call

from java_build import build_wrapper

here = dirname(abspath(__file__))

default_jar = f'{here}/java-handler/build/libs/nuclio-test-handler.jar'
default_handler = 'ReverseEventHandler'

parser = ArgumentParser(description=__doc__)
parser.add_argument(
    '-j', '--jar', help='jar file name', type=FileType(), default=default_jar)
parser.add_argument(
    '-H', '--handler', help='handler name', default=default_handler)
parser.add_argument(
    '-w', '--max-workers', help='number of workers', default=1, type=int)
args = parser.parse_args()

wrapper_jar = build_wrapper(abspath(args.jar.name))
if not wrapper_jar:
    raise SystemExit('error: cannot build')

handler_name = args.handler
max_workers = args.max_workers

cfg = f'''
meta:
  name: java-reverser
spec:
  runtime: java
  handler: {handler_name}
  triggers:
    incrementor_http:
      maxWorkers: {max_workers}
      kind: http
'''

cfg_file = '/tmp/java-handler.yaml'
with open(cfg_file, 'w') as out:
    out.write(cfg)

env = environ.copy()
# Assume we're running from nuclio root
env['NUCLIO_WRAPPER_JAR'] = wrapper_jar

retval = call(['./processor', '-config', cfg_file], env=env)
raise SystemExit(retval)
