#!/usr/bin/env python
"""Run the python3 processor"""

import atexit
from argparse import ArgumentParser, FileType
from os import environ
from os.path import abspath, basename, dirname, exists, splitext
from shutil import rmtree
from subprocess import call

here = dirname(abspath(__file__))

default_file = f'{here}/python-handler/handler.py'
default_handler = 'handler'

parser = ArgumentParser(description=__doc__)
parser.add_argument(
    '-f', '--file', help='handler file', type=FileType(), default=default_file)
parser.add_argument(
    '-H', '--handler', help='handler name', default=default_handler)
parser.add_argument(
    '-w', '--max-workers', help='number of workers', default=1, type=int)
args = parser.parse_args()

py_path = dirname(args.file.name)
module_name, _ = splitext(basename(args.file.name))
handler_name = args.handler
max_workers = args.max_workers

cfg = f'''
metadata:
  name: python3 handler
spec:
  runtime: python3
  handler: {module_name}:{handler_name}
  triggers:
    t1:
      maxWorkers: {max_workers}
      kind: http
      port: 8080
'''

cfg_file = '/tmp/python3-handler.yaml'
with open(cfg_file, 'w') as out:
    out.write(cfg)

env = environ.copy()
env['NUCLIO_PYTHON_PATH'] = py_path


def cleanup():
    pycache = f'{py_path}/__pycache__'
    if exists(pycache):
        rmtree(pycache)


cleanup()  # Clean slate
atexit.register(cleanup)

# Assume we're running from nuclio root
retval = call(['./processor', '-config', cfg_file], env=env)
raise SystemExit(retval)
